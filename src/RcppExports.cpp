// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_rbern
std::vector<int> cpp_rbern(int n, std::vector<double> prob);
RcppExport SEXP _ProductFormFA_cpp_rbern(SEXP nSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rbern(n, prob));
    return rcpp_result_gen;
END_RCPP
}
// rPoissonBB
List rPoissonBB(double alpha, double theta, double lambda, int n);
RcppExport SEXP _ProductFormFA_rPoissonBB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rPoissonBB(alpha, theta, lambda, n));
    return rcpp_result_gen;
END_RCPP
}
// rNegBinBB
List rNegBinBB(double alpha, double theta, int n0, double mu0, int n);
RcppExport SEXP _ProductFormFA_rNegBinBB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP n0SEXP, SEXP mu0SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rNegBinBB(alpha, theta, n0, mu0, n));
    return rcpp_result_gen;
END_RCPP
}
// rGammaIBP
List rGammaIBP(double alpha, double theta, double a, double b, int n);
RcppExport SEXP _ProductFormFA_rGammaIBP(SEXP alphaSEXP, SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rGammaIBP(alpha, theta, a, b, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ProductFormFA_cpp_rbern", (DL_FUNC) &_ProductFormFA_cpp_rbern, 2},
    {"_ProductFormFA_rPoissonBB", (DL_FUNC) &_ProductFormFA_rPoissonBB, 4},
    {"_ProductFormFA_rNegBinBB", (DL_FUNC) &_ProductFormFA_rNegBinBB, 5},
    {"_ProductFormFA_rGammaIBP", (DL_FUNC) &_ProductFormFA_rGammaIBP, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ProductFormFA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
