// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// buffet_gamma_IBP
List buffet_gamma_IBP(double alpha, double theta, int n, double a, double b);
RcppExport SEXP _ProductFormFA_buffet_gamma_IBP(SEXP alphaSEXP, SEXP thetaSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(buffet_gamma_IBP(alpha, theta, n, a, b));
    return rcpp_result_gen;
END_RCPP
}
// p_kmn_all_gamma_IBP
std::vector<double> p_kmn_all_gamma_IBP(double alpha, double theta, int m, int n, double b);
RcppExport SEXP _ProductFormFA_p_kmn_all_gamma_IBP(SEXP alphaSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(p_kmn_all_gamma_IBP(alpha, theta, m, n, b));
    return rcpp_result_gen;
END_RCPP
}
// p_kmn_gamma_IBP
double p_kmn_gamma_IBP(double alpha, double theta, int m, int n, double b);
RcppExport SEXP _ProductFormFA_p_kmn_gamma_IBP(SEXP alphaSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(p_kmn_gamma_IBP(alpha, theta, m, n, b));
    return rcpp_result_gen;
END_RCPP
}
// buffet_negbin_BB
List buffet_negbin_BB(double alpha, double theta, int n, int nstar, double p);
RcppExport SEXP _ProductFormFA_buffet_negbin_BB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP nSEXP, SEXP nstarSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nstar(nstarSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(buffet_negbin_BB(alpha, theta, n, nstar, p));
    return rcpp_result_gen;
END_RCPP
}
// p_kmn_all_negbin_BB
std::vector<double> p_kmn_all_negbin_BB(double alpha, double theta, int m, int n, double p);
RcppExport SEXP _ProductFormFA_p_kmn_all_negbin_BB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(p_kmn_all_negbin_BB(alpha, theta, m, n, p));
    return rcpp_result_gen;
END_RCPP
}
// p_kmn_negbin_BB
double p_kmn_negbin_BB(double alpha, double theta, int m, int n, double p);
RcppExport SEXP _ProductFormFA_p_kmn_negbin_BB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(p_kmn_negbin_BB(alpha, theta, m, n, p));
    return rcpp_result_gen;
END_RCPP
}
// buffet_poiss_BB
List buffet_poiss_BB(double alpha, double theta, int n, double lambda);
RcppExport SEXP _ProductFormFA_buffet_poiss_BB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP nSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(buffet_poiss_BB(alpha, theta, n, lambda));
    return rcpp_result_gen;
END_RCPP
}
// buffet_poiss_BB_initial_sample
List buffet_poiss_BB_initial_sample(double alpha, double theta, int m, int n, std::vector<int> counts, double lambda);
RcppExport SEXP _ProductFormFA_buffet_poiss_BB_initial_sample(SEXP alphaSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP countsSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(buffet_poiss_BB_initial_sample(alpha, theta, m, n, counts, lambda));
    return rcpp_result_gen;
END_RCPP
}
// mean_kmn_all_poiss_BB
std::vector<double> mean_kmn_all_poiss_BB(double alpha, double theta, int m, int n, double lambda);
RcppExport SEXP _ProductFormFA_mean_kmn_all_poiss_BB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_kmn_all_poiss_BB(alpha, theta, m, n, lambda));
    return rcpp_result_gen;
END_RCPP
}
// mean_kmn_poiss_BB
double mean_kmn_poiss_BB(double alpha, double theta, int m, int n, double lambda);
RcppExport SEXP _ProductFormFA_mean_kmn_poiss_BB(SEXP alphaSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP nSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_kmn_poiss_BB(alpha, theta, m, n, lambda));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rbern
std::vector<int> cpp_rbern(int n, std::vector<double> prob);
RcppExport SEXP _ProductFormFA_cpp_rbern(SEXP nSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rbern(n, prob));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ProductFormFA_buffet_gamma_IBP", (DL_FUNC) &_ProductFormFA_buffet_gamma_IBP, 5},
    {"_ProductFormFA_p_kmn_all_gamma_IBP", (DL_FUNC) &_ProductFormFA_p_kmn_all_gamma_IBP, 5},
    {"_ProductFormFA_p_kmn_gamma_IBP", (DL_FUNC) &_ProductFormFA_p_kmn_gamma_IBP, 5},
    {"_ProductFormFA_buffet_negbin_BB", (DL_FUNC) &_ProductFormFA_buffet_negbin_BB, 5},
    {"_ProductFormFA_p_kmn_all_negbin_BB", (DL_FUNC) &_ProductFormFA_p_kmn_all_negbin_BB, 5},
    {"_ProductFormFA_p_kmn_negbin_BB", (DL_FUNC) &_ProductFormFA_p_kmn_negbin_BB, 5},
    {"_ProductFormFA_buffet_poiss_BB", (DL_FUNC) &_ProductFormFA_buffet_poiss_BB, 4},
    {"_ProductFormFA_buffet_poiss_BB_initial_sample", (DL_FUNC) &_ProductFormFA_buffet_poiss_BB_initial_sample, 6},
    {"_ProductFormFA_mean_kmn_all_poiss_BB", (DL_FUNC) &_ProductFormFA_mean_kmn_all_poiss_BB, 5},
    {"_ProductFormFA_mean_kmn_poiss_BB", (DL_FUNC) &_ProductFormFA_mean_kmn_poiss_BB, 5},
    {"_ProductFormFA_cpp_rbern", (DL_FUNC) &_ProductFormFA_cpp_rbern, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ProductFormFA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
